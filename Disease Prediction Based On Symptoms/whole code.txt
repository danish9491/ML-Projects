import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report,confusion_matrix

train_data = pd.read_csv('Training.csv').drop(columns=['Unnamed: 133'], errors='ignore')
test_data = pd.read_csv('Testing.csv')

X_train = train_data.drop(columns=['prognosis'])
y_train = train_data['prognosis']
X_test = test_data.drop(columns=['prognosis'])
y_test = test_data['prognosis']

model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)


print("Accuracy:", accuracy)
print("\nClassification Report:\n", report)
print("\nConfusion Matrix:\n", conf_matrix)

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

plt.figure(figsize=(15, 6))
symptom_counts = X_train.sum().sort_values(ascending=False).head(20)  # Top 20 symptoms by frequency
sns.barplot(x=symptom_counts.index, y=symptom_counts.values, palette="viridis")
plt.xticks(rotation=90)
plt.title("Top 20 Symptoms by Frequency")
plt.xlabel("Symptoms")
plt.ylabel("Frequency")
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(y=y_train, order=y_train.value_counts().index, palette="coolwarm")
plt.title("Disease Distribution in Training Set")
plt.xlabel("Count")
plt.ylabel("Disease")
plt.show()

# This code assumes you used a Decision Tree model
importances = model.feature_importances_
indices = np.argsort(importances)[-10:]  # Top 10 important features
plt.figure(figsize=(10, 6))
plt.barh(range(len(indices)), importances[indices], color="skyblue", align="center")
plt.yticks(range(len(indices)), [X_train.columns[i] for i in indices])
plt.title("Top 10 Most Important Symptoms for Disease Prediction")
plt.xlabel("Feature Importance")
plt.show()

# Generate the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plotting the confusion matrix
plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.show()

import joblib
joblib.dump(model, 'trained_model.joblib')


